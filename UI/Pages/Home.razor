@page "/"
@rendermode InteractiveServer
@inject HashSet<ProductionFact> production
@inject HashSet<CommunicationFact> communication
@inject ProcessModel model
@inject HashSet<Role> actors

@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Open Enterprise</PageTitle>

@if (user?.Identity?.IsAuthenticated == true)
{
    <article>
        <header>
            <h1>Hello, @user.Identity.Name!</h1>
        </header>
        <body>
            <small>Email: @user.FindFirst(ClaimTypes.Email)?.Value</small><br>
            <small>Id: @user.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value</small>
        </body>
    </article>

}

<div class="grid">
    @foreach(var actor in actors){
        <div>
            <article>
                <header>@actor.Name</header>
            </article>
            @foreach(var act in model.GetPossibleActs(actor)) {
                <Action Act="act" Perfomer="actor"></Action>
            }
        </div>
    }
</div>

@code {
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        actors.Add(new(user.Identity!.Name!));
    }
}